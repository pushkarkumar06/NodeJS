Express.js is a web application framework for Node.js that simplifies building server-side applications and APIs.

---> why we choose express over node js

=> simplifies Routing :-> Node.js alone require verbose boilerplate to handle different HTTP routes . 
    but express do this alone with clean and readable syntax ..
     ex -> app.get('/home', (req, res) => res.send('Hello Home'));

=> Middleware Support => Express allow us to plug in middleware for logging , authentication , parsing etc .
    this modularity makes development more flexible and organized 
    ex -> app.use(express.json()); // to parse JSON bodies
 


ðŸ”— Relationship Between Express and Node.js: 
 => Node.js is the core runtime that execute Javascript on the server and provide low - level API's like http , fs etc..
 => Express.js biult on top of Node.js to make web development easire .it uses Node's http modeule under the hood but offers a higher level interface .


ðŸ”‘ Top Reasons to Use Express.js:
1. Simplified Routing
    * Express makes it easy to handle different HTTP requests (GET, POST, PUT, DELETE) with clean syntax:
    * app.get('/users', (req, res) => res.send('User list'));

2. Middleware Support
    * Middleware functions allow you to process requests in layers â€” for logging, authentication, parsing JSON, error handling, etc.

4. REST API & Web App Ready
    * Whether you're building a REST API, web app, or single-page app backend, Express is designed to handle it efficiently.

6. Integration Friendly
    -> Works smoothly with:

        * Databases (MongoDB with Mongoose, MySQL, PostgreSQL)
        * Frontend frameworks (React, Angular, Vue)
        * Authentication libraries (Passport.js, JWT)


